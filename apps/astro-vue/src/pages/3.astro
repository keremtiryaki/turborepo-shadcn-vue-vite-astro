---
import "shadcn-vue/src/assets/index.css";
import { Button } from "shadcn-vue/src/components/ui/button";
import SideMenu from "../components/SideMenu.vue";
// import AlertSample from "../components/AlertSample.vue";
// import Dashboard from "shadcn-vue/src/dashboard/Example.vue";
// import AutoForm from "shadcn-vue/src/AutoForm/Example.vue";
import ModeToggle from "shadcn-vue/src/components/ui/ModeToggle.vue";
import RestaMenu from "shadcn-vue/src/AutoForm/RestaMenu.vue";
// import SampleSidebar from "shadcn-vue/src/AutoForm/SampleSidebar.vue";
// import Sidebar2 from "shadcn-vue/src/AutoForm/Sidebar2.vue";
// import DatePickerSample from "../components/DatePickerSample.vue";
import ToasterContainer from "../components/ToasterContainer.vue";
import ShowToast from "../components/ShowToast.vue";
import menuData from "../components/menudata.json";
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
		<script is:inline>
			const getThemePreference = () => {
				if (
					typeof localStorage !== "undefined" &&
					localStorage.getItem("theme")
				) {
					return localStorage.getItem("theme");
				}
				return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
			};
			const isDark = getThemePreference() === "dark";
			document.documentElement.classList[isDark ? "add" : "remove"]("dark");

			if (typeof localStorage !== "undefined") {
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains("dark");
					localStorage.setItem("theme", isDark ? "dark" : "light");
				});
				observer.observe(document.documentElement, {
					attributes: true,
					attributeFilter: ["class"],
				});
			}
		</script>
	</head>
	<body>
		<SideMenu client:load />
		<RestaMenu client:load menu-items={menuData} />

		<ShowToast client:load />

		<!-- <SampleSidebar client:load /> -->
		<!-- <Sidebar2 client:load /> -->

		<ModeToggle client:load />

		<!-- <AlertSample client:load /> -->
		<!-- <Button>Hello World</Button>
		<DatePickerSample client:load /> -->
		<!-- <h1>Astro</h1>
    -->
		<!-- <Dashboard client:load /> -->
		<!-- <AutoForm client:load /> -->

		<ToasterContainer client:load />

		<Button id="show-dialog-btn">Show Dialog from astro</Button>

		<template id="dialog-template">
			<div>Hello madafaka <Button class="close-btn">Close</Button></div>
		</template>

		<script>
			import { useDialog } from "@/components/ui/dialog/use-dialog";
			import {
				store,
				subscribeToCount,
			} from "shadcn-vue/src/AutoForm/storeSample";

			(window as any).store = store;
			console.log("store", store);
			(window as any).stopSampleStore = subscribeToCount((newCount) => {
				console.log("newCount", newCount);
			});

			const dialog = useDialog();
			const showDialogBtn = document.getElementById("show-dialog-btn");
			showDialogBtn?.addEventListener("click", () => {
				// console.log("showDialogBtn clicked state:", state);
				const id = "dialog-1";
				// let html = `<div id="${id}">Hello madafaka <button class="close-btn inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2">Close</button> </div>
				// `;
				const template =
					document.querySelector<HTMLTemplateElement>("#dialog-template");
				if (template) {
					const htmlElem = template.content.cloneNode(true) as DocumentFragment;
					// htmlElem;
					htmlElem.querySelector("div")!.id = id;
					console.log("html", htmlElem);

					dialog.show({
						id,
						html: htmlElem.firstElementChild!.outerHTML,
						closeable: false,
						onSuccess: (result) => {
							console.log("dialog closed with result:", result);
						},
					});
					console.log("showDialogBtn clicked id:", id);

					setTimeout(() => {
						const dialogElem = document.querySelector(`#${id}`);
						console.log("document.querySelector(`#${id}`)");
						console.log(dialogElem);
						dialogElem
							?.querySelector(".close-btn")
							?.addEventListener("click", () => {
								dialog.close(id);
							});

						// const openedDialog = dialog.getDialog(id);
						// openedDialog?.options.onSuccess?.("hello");
						// dialog.close(id);

						// console.log(
						// 	"adding event listener to close-btn",
						// 	document.querySelector(`#${id}`)
						// );

						// document
						// 	.querySelector(`#${id} .close-btn`)
						// 	?.addEventListener("click", () => {
						// 		dialog.close(id);
						// 	});
					}, 1000);
				}
				// use template to clone and get html
			});
		</script>
	</body>
</html>
